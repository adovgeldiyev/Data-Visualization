library(vcd)
mosaic(mytable, shade=FALSE, legend = TRUE)
mytable <-with(sports, table(Scale))
mytable
mytable <-with(sports, table(Scale, France))
mytable
mytable <-with(sports, table(Scale, sports[c(2:6)]))
mytable
mytable <-with(sports, table(Scale, apply(sports[,-1], 1, sum)))
mytable
prop.table(mytable,1)
prop.table(mytable)
fit = ca(mytable)
fit
plot(fit, mass = T, contrib = "absolute",
map = "rowgreen", arrows = c(F,T))
countries
scale <- sports[1]
scale
countries
countries <- sports[2:6]
countries
scale <- sports[1]
scale
rows<- get_ca_row(sports)
library(factoextra)
rows<- get_ca_row(sports)
library(factoextra)
dt <- table(as.matrix(sports))
library(factoextra)
library(FactoMineR)
dt <- table(as.matrix(sports))
res.ca<-CA(sports, graph=FALSE)
dt
library(factoextra)
library(FactoMineR)
dt <- table(as.matrix(sports))
res.ca<-CA(dt, graph=FALSE)
library(factoextra)
library(FactoMineR)
dt <- table(as.matrix(sports))
res.ca<-CA(sports, graph=FALSE)
library(factoextra)
library(FactoMineR)
dt <- table(as.numeric(as.matrix(sports)))
res.ca<-CA(sports, graph=FALSE)
sports[2:5,]
sports <- read_excel("sport.xls")
head(sports)
str(sports)
sports[,2:6]
sports[1]
sports[0]
sports[-1]
sports[-1,]
sports[,-1]
sports[,1]
library(factoextra)
library(FactoMineR)
dt <- table(as.numeric(as.matrix(sports)))
res.ca<-CA(sports[2:6], graph=FALSE)
print(res.ca)
rows <-row <- get_ca_row(res.ca)
rows
mosaic(res.ca)
mosaic(rows)
rows <- get_ca_row(res.ca)
rows
cols <- get_ca_col(res.ca)
library(vcd)
mosaic(rows, shade = TRUE, legend=TRUE)
library(vcd)
mosaic(cols, shade = TRUE, legend=TRUE)
mosaic(res.ca, shade = TRUE, legend=TRUE)
str(rows)
library(factoextra)
library(FactoMineR)
dt <- table(as.matrix(sports))
res.ca<-CA(sports[2:6], graph=FALSE)
print(res.ca)
str(res.ca)
str(dt)
mosaic(dt, shade = TRUE, legend = TRUE)
library(factoextra)
library(FactoMineR)
dt <- table(as.matrix(sports))
dt
library(factoextra)
library(FactoMineR)
dt <- table(sports)
dt
library(factoextra)
library(FactoMineR)
dt <- table(as.matrix(sports))
dt
str(dt)
library(factoextra)
library(FactoMineR)
dt <- as.matrix(sports)
str(dt)
library(factoextra)
library(FactoMineR)
dt <- as.matrix(sports)
library(factoextra)
library(FactoMineR)
dt <- as.matrix(sports)
dt
library(vcd)
mosaic(dt, shade = TRUE, legend = TRUE)
rows <- get_ca_row(dt)
table(dt)
prop.table(dt)
men <- dt[,,1]
men
men <- dt[,,1]
men <- dt[,1]
men
women<-dt[,2]
women
men <- dt[1]
men
women<-dt[2]
women
men <- dt[1,]
men
men <- dt[1,,]
men <- dt[1:]
men <- dt[1]
men
men <- dt[1,]
men
men <- dt[0,]
men
wmen <-dt[2,3,4,5]
wmen
wmen <-dt[2,3]
wmen
wmen <-dt[,2]
wmen
wmen <-dt[,2:5]
wmen
wmen <-dt[,2,3]
wmen <-dt[2,3]
wmen
wmen <-dt[,2]
wmen
men <- dt[0,]
wmen <-dt[,2]
wmen
prop.table(men)
men <- dt[1,]
men
men <- dt[1]
men
men <- dt[c(1)]
men
men <- dt[c(1:5)]
men
wmen <-dt[,2]
wmen
wmen <-dt[,2:6]
wmen
prop.table(men)
mytable <- xtabs(~ Scale+France, data=sports)
prop.table(mytable)
fit = ca(mytable)
summary(fit)
fit
plot(fit, mass = T, contrib = "absolute",
map="rowgreen", arrows = c(T,T))
library(vcd)
mosaic(mytable, shade=TRUE, legend=TRUE)
install.packages("lubridate")
install.packages("lubridate")
install.packages("mosaic")
install.packages("mosaic")
install.packages("mosaic")
install.packages("mosaic")
install.packages("tidyquant")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(mosaic)
library(lubridate)
library(ggplot2)
library(tidyquant)
stock_data <- read.csv(file = "Intel-1998.csv", header = TRUE, sep = ",")
head(stock_data)
stock_data %>%
ggplot(aes(x=Date, y = Close))+
geom_line() +
labs(title="Closing Price vs Date", y = "Closing Price", x="")+
theme_tq()
stock_data %>%
ggplot(aes(x=Date, y = Close))+
geom_line() +
labs(title="Closing Price vs Date", y = "Closing Price", x="")
ggplot(data = stock_data, aes(x=Date, y=Close))
ggplot(data = stock_data, aes(x=Date, y=Close))+geom_line()
ggplot(data = stock_data, aes(x=Date, y=Close),group = 1)+geom_line()
ggplot(stock_data, aes(x=Date, y=Close))+geom_line()
library(tidyverse)
library(ggplot2)
library(dplyr)
library(Hmisc)
library(ggforce)
library(lubridate)
library(corrplot)
library(car)
library(MASS)
library(mapproj)
#Preprocessing
covid <- read.csv(file = 'updatedCovidlatlong.csv', header = TRUE, sep = ",")
setwd("C:/Users/14023/OneDrive/Desktop/DePaul 5th quarter/DSC 465 Data Visualization/Project")
#Preprocessing
covid <- read.csv(file = 'updatedCovidlatlong.csv', header = TRUE, sep = ",")
head(covid)
summary(covid)
covid$continent <- factor(covid$ï..continent, exclude = NULL)
covid$location <- factor(covid$Location, exclude = NULL)
covid$date <- as.Date(covid$Date,"%m/%d/%Y")
covid <- subset(covid, select = -c(Location,Date,ï..continent) )
summary(covid)
num_data = subset(covid,select = -c(Iso.Code,continent,location,date,
Month, Latitude..generated.,Longitude..generated.,
New.Cases.P.M,New.Cases.Smt,New.Cases.Smt.P.M,
New.Deaths.P.M,New.Deaths.Smt,New.Deaths.Smt.P.M,
Tot.Cases.P.M,Tot.Deaths.P.M,group))
spearCor <- cor(num_data, method = 'spearman')
corrplot(spearCor, type = "upper", order="hclust",tl.cex = 0.75,tl.col="black")
covid %>%
rename(
"New deaths" = New.Deaths,
"New Cases" = New.Cases
)
summary(covid)
covid <-covid %>%
rename(
"New deaths" = New.Deaths,
"New Cases" = New.Cases
)
summary(covid)
num_data = subset(covid,select = -c(Pop.Index))
num_data = subset(covid,select = -c(Human.Dev.Index))
covid <-covid %>%
rename(
"Total deaths" = Total.Deaths,
"Total cases" = Total.Cases,
"Male Smokers" = Male.Smokers,
"Female Smokers" = Female.Smokers,
"Cardio death rate" = Cardio.Death.Rate,
"Hospital beds" = Hosp.Beds.P.Thsd,
"Age 70 older" = Aged.70.Older,
"Age 65 older" = Aged.65.Older,
"Median age"= Median.Age,
"Life expectancy" = Life.Expectancy,
"GDP per capita" = Gdp.Per.Capita,
"Handwash facilities" = Handwash.Fac,
"Stringency index" = Stry.Index,
"Extreme poverty" = Extreme.Poverty
)
spearCor <- cor(num_data, method = 'spearman')
corrplot(spearCor, type = "upper", order="hclust",tl.cex = 0.75,tl.col="black")
corrplot(spearCor, type = "upper", order="hclust",tl.cex = 0.75,tl.col="black")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(Hmisc)
library(ggforce)
library(lubridate)
library(corrplot)
library(car)
library(MASS)
library(mapproj)
#Preprocessing
covid <- read.csv(file = 'updatedCovidlatlong.csv', header = TRUE, sep = ",")
covid$continent <- factor(covid$ï..continent, exclude = NULL)
covid$location <- factor(covid$Location, exclude = NULL)
covid$date <- as.Date(covid$Date,"%m/%d/%Y")
covid <- subset(covid, select = -c(Location,Date,ï..continent) )
num_data = subset(covid,select = -c(Iso.Code,continent,location,date,Pop.Index,Human.Dev.Index,
Month, Latitude..generated.,Longitude..generated.,
New.Cases.P.M,New.Cases.Smt,New.Cases.Smt.P.M,
New.Deaths.P.M,New.Deaths.Smt,New.Deaths.Smt.P.M,
Tot.Cases.P.M,Tot.Deaths.P.M,group))
covid <-covid %>%
rename(
"Total deaths" = Total.Deaths,
"Total cases" = Total.Cases,
"Male Smokers" = Male.Smokers,
"Female Smokers" = Female.Smokers,
"Cardio death rate" = Cardio.Death.Rate,
"Hospital beds" = Hosp.Beds.P.Thsd,
"Age 70 older" = Aged.70.Older,
"Age 65 older" = Aged.65.Older,
"Median age"= Median.Age,
"Life expectancy" = Life.Expectancy,
"GDP per capita" = Gdp.Per.Capita,
"Handwash facilities" = Handwash.Fac,
"Stringency index" = Stry.Index,
"Extreme poverty" = Extreme.Poverty
)
spearCor <- cor(num_data, method = 'spearman')
corrplot(spearCor, type = "upper", order="hclust",tl.cex = 0.75,tl.col="black")
num_data <-num_data %>%
rename(
"Total deaths" = Total.Deaths,
"Total cases" = Total.Cases,
"Male Smokers" = Male.Smokers,
"Female Smokers" = Female.Smokers,
"Cardio death rate" = Cardio.Death.Rate,
"Hospital beds" = Hosp.Beds.P.Thsd,
"Age 70 older" = Aged.70.Older,
"Age 65 older" = Aged.65.Older,
"Median age"= Median.Age,
"Life expectancy" = Life.Expectancy,
"GDP per capita" = Gdp.Per.Capita,
"Handwash facilities" = Handwash.Fac,
"Stringency index" = Stry.Index,
"Extreme poverty" = Extreme.Poverty
)
spearCor <- cor(num_data, method = 'spearman')
corrplot(spearCor, type = "upper", order="hclust",tl.cex = 0.75,tl.col="black")
num_data <-num_data %>%
rename(
"Diabete prevention" = Diabet.Prev)
spearCor <- cor(num_data, method = 'spearman')
corrplot(spearCor, type = "upper", order="hclust",tl.cex = 0.75,tl.col="black")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(Hmisc)
library(ggforce)
library(lubridate)
library(corrplot)
library(car)
library(MASS)
library(mapproj)
#Preprocessing
covid <- read.csv(file = 'updatedCovidlatlong.csv', header = TRUE, sep = ",")
covid$continent <- factor(covid$ï..continent, exclude = NULL)
covid$location <- factor(covid$Location, exclude = NULL)
covid$date <- as.Date(covid$Date,"%m/%d/%Y")
covid <- subset(covid, select = -c(Location,Date,ï..continent) )
num_data = subset(covid,select = -c(Iso.Code,continent,location,date,Pop.Index,Human.Dev.Index,
Month, Latitude..generated.,Longitude..generated.,
New.Cases.P.M,New.Cases.Smt,New.Cases.Smt.P.M,
New.Deaths.P.M,New.Deaths.Smt,New.Deaths.Smt.P.M,
Tot.Cases.P.M,Tot.Deaths.P.M,group))
num_data <-num_data %>%
rename(
"New cases" = New.Cases,
"New deaths" = New.Deaths,
"Total deaths" = Total.Deaths,
"Total cases" = Total.Cases,
"Male Smokers" = Male.Smokers,
"Female Smokers" = Female.Smokers,
"Cardio death rate" = Cardio.Death.Rate,
"Hospital beds" = Hosp.Beds.P.Thsd,
"Age 70 older" = Aged.70.Older,
"Age 65 older" = Aged.65.Older,
"Median age"= Median.Age,
"Life expectancy" = Life.Expectancy,
"GDP per capita" = Gdp.Per.Capita,
"Handwash facilities" = Handwash.Fac,
"Stringency index" = Stry.Index,
"Extreme poverty" = Extreme.Poverty,
"Diabete prevention" = Diabet.Prev
)
spearCor <- cor(num_data, method = 'spearman')
corrplot(spearCor, type = "upper", order="hclust",tl.cex = 0.75,tl.col="black")
corrplot(spearCor, type = "upper", order="hclust",tl.cex = 0.9,tl.col="black")
india_df <- filter(covid,
location=="India")
hwplot <- ggplot(india_df, aes(x = date, y = New.Cases.P.M ,color =Tot.Deaths.P.M)) +
geom_point(size = 2)+
scale_y_continuous(labels =addUnits, limits = c(0, 50))+
scale_x_date(date_breaks = "1 month",
limits = as.Date(c('2020-02-01', '2020-10-30'), format="%d/%m"),
date_labels="%b-%Y" )+ggtitle("New cases in India")
addUnits <- function(n) {
labels <- ifelse(n < 1000, n,  # less than thousands
ifelse(n < 1e6, paste0(round(n/1e3), 'k'),  # in thousands
ifelse(n < 1e9, paste0(round(n/1e6), 'M'),  # in millions
ifelse(n < 1e12, paste0(round(n/1e9), 'B'), # in billions
ifelse(n < 1e15, paste0(round(n/1e12), 'T'), # in trillions
'too big!'
)))))
return(labels)
}
hwplot <- ggplot(india_df, aes(x = date, y = New.Cases.P.M ,color =Tot.Deaths.P.M)) +
geom_point(size = 2)+
scale_y_continuous(labels =addUnits, limits = c(0, 50))+
scale_x_date(date_breaks = "1 month",
limits = as.Date(c('2020-02-01', '2020-10-30'), format="%d/%m"),
date_labels="%b-%Y" )+ggtitle("New cases in India")
hwplot +  scale_colour_gradient2(
low = "yellow",
mid = "red", # middle color value
high = "black",
midpoint = 100.5, # middle data value
space= "Lab",
na.value = "grey50"
)+theme_dark()
View(covid)
library(gridExtra)
plt1 <- ggplot(covid, aes(x=date, y=Tot.Deaths.P.M))
plt1 +  scale_y_continuous(labels =addUnits, limits = c(0, 50))+
scale_x_date(date_breaks = "1 month",
limits = as.Date(c('2020-02-01', '2020-10-30'), format="%d/%m"),
date_labels="%b" )+
stat_bin2d(aes(fill=..density..))+ylab("Total deaths p/m")+ggtitle("density of deaths in each month")
plt1 +  scale_y_continuous(labels =addUnits, limits = c(0, 50))+
scale_x_date(date_breaks = "1 month",
limits = as.Date(c('2020-02-01', '2020-10-30'), format="%d/%m"),
date_labels="%b" )+
stat_bin2d(aes(fill=..density..))+ylab("Total deaths per million")+ggtitle("density of deaths for each month (2020)")
plt2 <- ggplot(covid, aes(x=date, y=Tot.Deaths.P.M))
plt2 +  scale_y_continuous(labels =addUnits, limits = c(0.5, 10.5))+
scale_x_date(date_breaks = "1 month",
limits = as.Date(c('2020-02-01', '2020-10-30'), format="%d/%m"),
date_labels="%b" )+
stat_density2d(aes(fill=..density..),
geom="raster",
contour=FALSE)+ylab("Total deaths p/m")+ggtitle("density of deaths in each month")
plt2 +  scale_y_continuous(labels =addUnits, limits = c(0.5, 10.5))+
scale_x_date(date_breaks = "1 month",
limits = as.Date(c('2020-02-01', '2020-10-30'), format="%d/%m"),
date_labels="%b" )+
stat_density2d(aes(fill=..density..),
geom="raster",
contour=FALSE)+ylab("Total deaths per million")+ggtitle("density of deaths for each month (2020)")
plt3<- ggplot(covid, aes(x=Life.Expectancy , y=Gdp.Per.Capita,colour=Tot.Deaths.P.M))
plt3 +
stat_density2d() +
geom_point()
library(gganimate)
library(gifski)
library(gapminder)
library(transformr)
p <- ggplot(
positive,
aes(x = date, y=New.Cases,colour = 'black')
)+scale_x_date(date_breaks = "1 month",
limits = as.Date(c('2020-02-01', '2020-10-30'), format="%d/%m"),
date_labels="%b" )+
geom_line(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +scale_y_continuous(labels =addUnits, limits = c(0, 100000))+
#scale_y_log10() +
labs(x = "Months in 2020", y = "New Cases")
p <- ggplot(
india_df,
aes(x = date, y=New.Cases,colour = 'black')
)+scale_x_date(date_breaks = "1 month",
limits = as.Date(c('2020-02-01', '2020-10-30'), format="%d/%m"),
date_labels="%b" )+
geom_line(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +scale_y_continuous(labels =addUnits, limits = c(0, 100000))+
#scale_y_log10() +
labs(x = "Months in 2020", y = "New Cases")
p
p <- ggplot(
india_df,
aes(x = date, y=New.Cases,colour = 'black')
)+scale_x_date(date_breaks = "1 month",
limits = as.Date(c('2020-02-01', '2020-10-30'), format="%d/%m"),
date_labels="%b" )+
geom_line(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +scale_y_continuous(labels =addUnits, limits = c(0, 100000))+
#scale_y_log10() +
labs(x = "Months in 2020", y = "New Cases")+ggtitle("Timeline of COVID-19 in India")
p
animate_plot<-p + transition_reveal(date)
animate(animate_plot, fps = 10, width = 750, height = 450)
anim_save("india_cases.gif")
plt1 +  scale_y_continuous(labels =addUnits, limits = c(0, 50))+
scale_x_date(date_breaks = "1 month",
limits = as.Date(c('2020-02-01', '2020-10-30'), format="%d/%m"),
date_labels="%b" )+
stat_bin2d(aes(fill=..density..))+ylab("Total deaths per million")+ggtitle("density of deaths for each month (2020)")
plt2 +  scale_y_continuous(labels =addUnits, limits = c(0.5, 10.5))+
scale_x_date(date_breaks = "1 month",
limits = as.Date(c('2020-02-01', '2020-10-30'), format="%d/%m"),
date_labels="%b" )+
stat_density2d(aes(fill=..density..),
geom="raster",
contour=FALSE)+ylab("Total deaths per million")+ggtitle("density of deaths for each month (2020)")
plt3<- ggplot(covid, aes(x=Life.Expectancy , y=Gdp.Per.Capita,colour=Tot.Deaths.P.M))
plt3 +
stat_density2d() +
geom_point()
uspopage_plot+scale_fill_viridis_d()
uspopage_plot <- ggplot(india_df, aes(x = date, y = Total.Deaths, fill = factor(Median.Age))) +
scale_y_continuous(labels =addUnits, limits = c(0, 75000))+
scale_x_date(date_breaks = "1 month",
limits = as.Date(c('2020-02-01', '2020-10-30'), format="%d/%m"),
date_labels="%b-%Y" ) +
theme(axis.text.x = element_text(angle = 90))+
geom_area()
uspopage_plot+scale_fill_viridis_d()
ggplot(covid,aes(x=continent, y=New.Cases, fill=continent)) +
geom_bar(stat="identity")+
scale_y_continuous(labels =addUnits, limits = c(0, 10000000))
plt1 +  scale_y_continuous(labels =addUnits, limits = c(0, 50))+
scale_x_date(date_breaks = "1 month",
limits = as.Date(c('2020-02-01', '2020-10-30'), format="%d/%m"),
date_labels="%b" )+
stat_bin2d(aes(fill=..density..))+ylab("Total deaths per million")+ggtitle("density of deaths for each month (2020)")
